@model RestApp.Web.Models.Users.NewUserModel

@{
    ViewBag.Title = T("View.User.Create").Text;
}

<div>
    <a href="@Url.Action("Index")" class="btn btn-inverse btn-mini"><i class="icon-arrow-left icon-white"></i> @T("View.Common.BackToList").Text</a> 
</div>

@using (Html.BeginForm("Create", "User", FormMethod.Post, new { @class = "form-horizontal" })) {
    @Html.ValidationSummary(true)
	<div class="well">
	<legend>@T("View.User.Create.New")</legend>
        <div class="control-group">
				@Html.LabelFor(model => model.Name, new { @class = "control-labelObligatory" })
        
			<div class="controls">
				@Html.EditorFor(model => model.Name)
				@Html.ValidationMessageFor(model => model.Name, null, new { @class = "text-error" })
			</div>
		</div>

	
        <div class="control-group">
				@Html.LabelFor(model => model.LoginName, new { @class = "control-labelObligatory" })
        
			<div class="controls">
				@Html.EditorFor(model => model.LoginName)
				@Html.ValidationMessageFor(model => model.LoginName, null, new { @class = "text-error" })
			</div>
		</div>

	
        <div class="control-group">
				@Html.LabelFor(model => model.Password, new { @class = "control-labelObligatory" })
        
			<div class="controls">
				@Html.PasswordFor(model => model.Password)
				@Html.ValidationMessageFor(model => model.Password, null, new { @class = "text-error" })
			</div>
		</div>

	
        <div class="control-group">
				@Html.LabelFor(model => model.ConfirmPassword, new { @class = "control-labelObligatory" })
        
			<div class="controls">
				@Html.PasswordFor(model => model.ConfirmPassword)
				@Html.ValidationMessageFor(model => model.ConfirmPassword, null, new { @class = "text-error" })
			</div>
		</div> 

	
        <div class="control-group">
				@Html.LabelFor(model => model.DocumentNumber, new { @class = "control-labelObligatory" })
        
			<div class="controls">
				@Html.TextBox("DocumentNumber", Model.DocumentNumber == 0 ? "" : Model.DocumentNumber.ToString())
				@Html.ValidationMessageFor(model => model.DocumentNumber, null, new { @class = "text-error" })
			</div>
		</div>

	
        <div class="control-group">
				@Html.LabelFor(model => model.Email, new { @class = "control-label" })
        
			<div class="controls">
				@Html.TextBoxFor(model => model.Email, new { @placeholder = T("View.Common.EmailSample") })
				@Html.ValidationMessageFor(model => model.Email, null, new { @class = "text-error" })
			</div>
		</div>

        <div class="control-group">
        @Html.Label("Roles", new { @class = "control-label" })
        @foreach (var role in Model.RolesList)
        {            
            <div class="controls"> 
                <label class="checkbox inline">
                    <input type="checkbox" name="Roles" value="@role.Id" @(role.Checked ? "checked=\"checked\"" : "")/>@role.Name
                                    </label>           
            </div>
        }
        </div>       
        <div class="control-group">
				@Html.LabelFor(model => model.LanguageId, new { @class = "control-label" })
        
			<div class="controls">
                @Html.DropDownList("LanguageID", Model.LanguageList, @T("View.Common.Select").Text)
				@Html.ValidationMessageFor(model => model.LanguageId, null, new { @class = "text-error" })
			</div>
		</div>

	
        <div class="control-group">
				@Html.LabelFor(model => model.Enabled, new { @class = "control-label" })
        
			<div class="controls">
				@Html.EditorFor(model => model.Enabled)
				@Html.ValidationMessageFor(model => model.Enabled, null, new { @class = "text-error" })
			</div>
		</div>

	
		<div class="controls">
			<div>
				<input type="submit" class="btn btn-primary" value="@T("View.Common.Save")" />
			</div>
		</div>
	</div>
    <p>
    <small style="color: Highlight">@T("View.Common.ObligatoryProperty").Text</small>
</p>
}

<div>
    <a href="@Url.Action("Index")" class="btn btn-inverse btn-mini"><i class="icon-arrow-left icon-white"></i> @T("View.Common.BackToList").Text</a> 
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
